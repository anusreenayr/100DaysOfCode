# You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.
# Merge nums1 and nums2 into a single array sorted in non-decreasing order.
# The final sorted array should not be returned by the function, but instead be stored inside the array nums1. 
# To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

#code
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        
        m = m-1
        n = n - 1

        while m >= 0 and n >= 0 :
            # Index from the end where highest value needs to be inserted
            index = m + n + 1

            # Get the maximum value and decrement the counter where the value is coming from
            if nums1[m] >= nums2[n]:
                nums1[index] = nums1[m]
                m -= 1
            else:
                nums1[index] = nums2[n]
                n -= 1

        # If all values in num2 are exhausted but values in num1 are present
        while  m >= 0:
            index = m + n + 1
            nums1[index] = nums1[m]
            m -= 1
        
        # If all values in num1 are exhausted but values in num2 are present
        while n >= 0:
            index = m + n + 1
            nums1[index] = nums2[n]
            n -= 1
        

        
