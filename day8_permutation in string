# Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise. In other words, return true if one of s1's permutations is the substring of s2.

  
  # code

  
  class Solution:

    def checkInclusion(self, s1: str, s2: str) -> bool:
        if len(s1) > len(s2):
            
            return False

        cache1 = [0] * 26
        cache2 = [0] * 26

        for i in range(len(s1)):

            cache1[ord(s1[i]) - ord('a')] += 1
            cache2[ord(s2[i]) - ord('a')] += 1

        if cache1 == cache2:
            return True

        for i in range(len(s1), len(s2)):

            cache2[ord(s2[i - len(s1)]) - ord('a')] -= 1
            cache2[ord(s2[i]) - ord('a')] += 1
            if cache1 == cache2:
                return True

        return False
